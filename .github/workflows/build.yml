name: Build
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
      checks: write
      
    container: mcr.microsoft.com/dotnet/sdk:9.0

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          show-progress: 'false'
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --no-restore
      
      - name: Test
        run: dotnet test tests/HybridMicroOrm.Tests/ --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test-results.trx"
        env:
          POSTGRES_HOST: postgres
          
      - name: Restore coverage history
        uses: dawidd6/action-download-artifact@v11
        with:
          name: CoverageHistory
          path: CoverageHistory
        continue-on-error: true
    
      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: '**/TestResults/*/coverage.cobertura.xml'
          targetdir: 'CoverageReports'
          historydir: 'CoverageHistory'
          reporttypes: 'HtmlInline;Cobertura'
    
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReports
          path: CoverageReports
    
      - name: Upload coverage history
        uses: actions/upload-artifact@v4
        with:
          name: CoverageHistory
          path: CoverageHistory

  package:
    runs-on: ubuntu-latest
    needs: build
    # Only run on release events or when manually triggered on main branch
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          show-progress: 'false'
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install MinVer tool
        run: dotnet tool install -g minver-cli

      - name: Restore dependencies
        run: dotnet restore

      - name: Validate MinVer versioning
        run: |
          echo "Validating MinVer version generation..."
          cd src/HybridMicroOrm && VERSION_MAIN=$(minver)
          cd ../HybridMicroOrm.Contracts && VERSION_CONTRACTS=$(minver)
          cd ../..
          echo "HybridMicroOrm version: $VERSION_MAIN"
          echo "HybridMicroOrm.Contracts version: $VERSION_CONTRACTS"
          
          # Ensure versions are not empty and follow semantic versioning
          if [[ -z "$VERSION_MAIN" ]] || [[ -z "$VERSION_CONTRACTS" ]]; then
            echo "Error: MinVer failed to generate versions"
            exit 1
          fi

      - name: Pack
        run: dotnet pack --configuration Release --no-restore

      - name: Validate packages
        run: |
          echo "Validating package contents..."
          
          # Check that packages were created
          MAIN_PACKAGE=$(find src/HybridMicroOrm/bin/Release -name "*.nupkg" | head -1)
          CONTRACTS_PACKAGE=$(find src/HybridMicroOrm.Contracts/bin/Release -name "*.nupkg" | head -1)
          MAIN_SYMBOLS=$(find src/HybridMicroOrm/bin/Release -name "*.snupkg" | head -1)
          CONTRACTS_SYMBOLS=$(find src/HybridMicroOrm.Contracts/bin/Release -name "*.snupkg" | head -1)
          
          if [[ -z "$MAIN_PACKAGE" ]] || [[ -z "$CONTRACTS_PACKAGE" ]]; then
            echo "Error: Package creation failed"
            exit 1
          fi
          
          if [[ -z "$MAIN_SYMBOLS" ]] || [[ -z "$CONTRACTS_SYMBOLS" ]]; then
            echo "Error: Symbol package creation failed"
            exit 1
          fi
          
          echo "Package validation successful:"
          echo "  Main package: $(basename "$MAIN_PACKAGE")"
          echo "  Contracts package: $(basename "$CONTRACTS_PACKAGE")"
          echo "  Main symbols: $(basename "$MAIN_SYMBOLS")"
          echo "  Contracts symbols: $(basename "$CONTRACTS_SYMBOLS")"
          
          # Validate package size (should be reasonable, not empty or too large)
          MAIN_SIZE=$(stat -c%s "$MAIN_PACKAGE")
          CONTRACTS_SIZE=$(stat -c%s "$CONTRACTS_PACKAGE")
          
          if [[ $MAIN_SIZE -lt 1000 ]] || [[ $CONTRACTS_SIZE -lt 1000 ]]; then
            echo "Error: Packages are too small, likely malformed"
            exit 1
          fi
          
          if [[ $MAIN_SIZE -gt 10485760 ]] || [[ $CONTRACTS_SIZE -gt 10485760 ]]; then
            echo "Warning: Packages are larger than 10MB"
          fi
          
          echo "Package size validation passed"

      - name: Dependency vulnerability scan
        run: |
          echo "Scanning for dependency vulnerabilities..."
          dotnet list package --vulnerable --include-transitive || true
          echo "Vulnerability scan completed"

      - name: Push to NuGet.org
        run: |
          echo "Publishing packages to NuGet.org..."
          dotnet nuget push src/HybridMicroOrm/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} --skip-duplicate
          dotnet nuget push src/HybridMicroOrm.Contracts/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} --skip-duplicate
          
          echo "Publishing symbol packages..."
          dotnet nuget push src/HybridMicroOrm/bin/Release/*.snupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} --skip-duplicate
          dotnet nuget push src/HybridMicroOrm.Contracts/bin/Release/*.snupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_KEY }} --skip-duplicate
